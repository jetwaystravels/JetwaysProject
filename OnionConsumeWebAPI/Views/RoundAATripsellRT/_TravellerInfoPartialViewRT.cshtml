@model DomainLayer.ViewModel.ViewModel
@{
    Layout = null;
    var data = Model;
}
<div class="py-15 px-20 rounded-4 text-15 bg-blue-1-05 mb-10">
    <div class="d-flex justify-content-end" style="margin-bottom:-15px;">
        <span style="margin-right:15px;"><b>Same Lead Passengers Contact Details</b></span>
        <button id="checkboxLead" class="checkbox-button2" onclick="toggleCheckbox()"></button>
    </div>
    <form id="passengerFormRT">
        @{
            int inafantIdx = 0;
        }

        @for (var i = 0; i < Model.passeengerlistRT[0].passengers.Count; i++)
        {
	    //Change for same Airline Roundtrip-26-09-2024
            string combinedkey = string.Empty;
            if (@Model.passeengerlistRT.Count > 1)
            {
                combinedkey = @Model.passeengerlistRT[0].passengers[i].passengerKey + "^" + @Model.passeengerlistRT[0].passengers[i]._Airlinename + "@" + @Model.passeengerlistRT[1].passengers[i].passengerKey + "^" + @Model.passeengerlistRT[1].passengers[i]._Airlinename;
            }
            else
            {
                combinedkey = @Model.passeengerlistRT[0].passengers[i].passengerKey + "^" + @Model.passeengerlistRT[0].passengers[i]._Airlinename;
            }
            <input type="hidden" name="passengers[@i].origin" value="@Model.passeengerlistRT[0].journeys[0].designator.origin" />
            <input type="hidden" name="passengers[@i].departure" value="@Model.passeengerlistRT[0].journeys[0].designator.departure" />
            <input type="hidden" name="passengers[@i].destination" value="@Model.passeengerlistRT[0].journeys[0].designator.destination" />
            <input type="hidden" name="passengers[@i].identifier" value="@Model.passeengerlistRT[0].journeys[0].segments[0].identifier.identifier" />
            <input type="hidden" name="passengers[@i].carrierCode" value="@Model.passeengerlistRT[0].journeys[0].segments[0].identifier.carrierCode" />

            <div><label class="text-16 fw-600">@Model.passeengerlistRT[0].passengers[i].passengerTypeCode</label></div>
            <input type="hidden" name="passengerdetails[@i].passengertypecode" value="@Model.passeengerlistRT[0].passengers[i].passengerTypeCode" />
            <input type="hidden" name="passengerdetails[@i].passengerkey" value="@combinedkey" />
            <div class="row">

                <div class="col-md-1">
                    <select name="passengerdetails[@i].Title" class="form-control text-center" asp-items="@ViewBag.Title"></select>
                </div>
                <div class="col-md-3">

                    <div class="form-input">
                        @{
                            //if (Model.passeengerlistRT[0].passengers[i].passengerKey == "0")
                            //{
                            <input type="hidden" name="passengerdetails[@i].passengerkey" value="@combinedkey" required />
                            //}
                // else
                //{
                            @* <input type="hidden" name="passengerdetails[@i].passengerkey" value="@Model.passeengerlistRT[0].passengers[i].passengerKey" required />*@
                //}
                        }
                        <input type="text" class="contactFname validate-field" data-validate="name" maxlength="32" oninput="validateInputT(event ,@i)" id="LeadPass[@i]" placeholder="First & middle name" name="passengerdetails[@i].First" style='text-transform:uppercase' required />

                    </div>
                    <p id="error-Fname" class="error-message  error-CFname" style="display: none;">Enter First Name</p>
                </div>
                <div class="col-md-3">

                    <div class="form-input">
                        <input type="text" class="contactLname validate-field" data-validate="last" oninput="validateInputT(event,@i)" maxlength="32" placeholder="Last name" name="passengerdetails[@i].Last" style='text-transform:uppercase' required />

                    </div>
                    <p id="error-Lname" class="error-message error-CLname" style="display:none">Enter Last Name</p>

                </div>
                @{
                    if (Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "ADT" || Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "CHD")
                    {
                        <div class="col-md-3">
                            <div class="form-input"><input type="text" data-validate="email" class="contactemail validate-field" maxlength="50" oninput="validateInputT(event,@i)" id="contactemailID" placeholder="email" name="passengerdetails[@i].email" required /></div>
                        </div>
                        <p class="error-message error-emailname" style="display:none">Enter your email</p>
                        <div class="col-md-2">
                            <div class="form-input"><input type="text" data-validate="phone" id="contactphoneID" class="contactphone validate-field" oninput="validateInputT(event,@i)" placeholder="phone" name="passengerdetails[@i].mobile" required /></div>
                        </div>

                        <p class="error-message error-phoneN" style="display:none">Enter your phone</p>
                    }
                    if (@Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "INFT" || @Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "INF")
                    {
                        <div class="col-md-4 infant-dob-input">
                            <div class="form-input dobinput d-flex" id="InfDOBCount_@inafantIdx">
                                <div class="dob-picker">
                                    <select class="brd-none year-select" id="year_@inafantIdx" required>
                                        <option value="" disabled selected>Year</option>
                                        <option value="2025">2025</option>
                                        <option value="2024">2024</option>
                                        <option value="2023">2023</option>
                                        <option value="2022">2022</option>
                                    </select>
                                    <select class="brd-none month-select" id="month_@inafantIdx" required>
                                        <option value="" disabled selected>Month</option>
                                        <option value="0">January</option>
                                        <option value="1">February</option>
                                        <option value="2">March</option>
                                        <option value="3">April</option>
                                        <option value="4">May</option>
                                        <option value="5">June</option>
                                        <option value="6">July</option>
                                        <option value="7">August</option>
                                        <option value="8">September</option>
                                        <option value="9">October</option>
                                        <option value="10">November</option>
                                        <option value="11">December</option>
                                    </select>
                                    <select class="brd-none day-select" id="day_@inafantIdx" required>
                                        <option value="" disabled selected>Day</option>
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                        <option value="6">6</option>
                                        <option value="7">7</option>
                                        <option value="8">8</option>
                                        <option value="9">9</option>
                                        <option value="10">10</option>
                                        <option value="11">11</option>
                                        <option value="12">12</option>
                                        <option value="13">13</option>
                                        <option value="14">14</option>
                                        <option value="15">15</option>
                                        <option value="16">16</option>
                                        <option value="17">17</option>
                                        <option value="18">18</option>
                                        <option value="19">19</option>
                                        <option value="20">20</option>
                                        <option value="21">21</option>
                                        <option value="22">22</option>
                                        <option value="23">23</option>
                                        <option value="24">24</option>
                                        <option value="25">25</option>
                                        <option value="26">26</option>
                                        <option value="27">27</option>
                                        <option value="28">28</option>
                                        <option value="29">29</option>
                                        <option value="30">30</option>
                                        <option value="31">31</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        inafantIdx++;
                    }
                }
            </div>
        }
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-primary mt-15" id="showReviewPopup">Save</button>
        </div>
    </form>
</div>
<div class="modal fade" id="dataPopup" tabindex="-1" role="dialog" aria-labelledby="dataPopupLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content pb-3">
            <div class="modal-header">
                <h5 class="modal-title" id="dataPopupLabel">Please review your details to ensure accuracy.</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="enteredData">
            </div>
            <div class="d-flex justify-content-end">
                <div class="editbtn me-3">
                    <button type="button" data-dismiss="modal" class="btn btn-primary w-20" id="editData">Edit</button>
                </div>
                <div class="countibtn me-3">
                    <button type="button" data-dismiss="modal" class="btn btn-primary w-20" id="ContinueData">Continue</button>
                </div>
            </div>

        </div>
    </div>
</div>
<!-- Include Bootstrap JavaScript -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .error-message {
        color: red;
        font-size: 12px;
        margin: 5px 0 0 0;
        display: none;
    }

    .error-message-val {
        color: red;
        font-size: 12px;
        margin: 5px 0 0 0;
        display: none;
    }

    .error-input {
        border: 1px solid red;
    }

    .modal-body p {
        border-radius: 6px;
        box-shadow: 0 0 10px 0 rgb(0 0 0 / 9%);
        border: 1px solid #E4E3E1;
        padding: 8px;
        margin-bottom: 10px;
    }

    .dobinput {
        background: #fff;
        color: var(--color-light-1);
        border: 1px solid var(--color-border);
        border-radius: 4px;
        padding: 8px;
        min-height: 40px;
        transition: all 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
        width: 100%;
        font-size: 14px;
    }

    .brd-none {
        border: none;
    }

    .custom-select::-ms-expand {
        display: none; /* Hide the arrow icon in IE */
    }

    .custom-select option {
        padding: 5px; /* Set the desired padding for each option */
        height: 50px;
        overflow: hidden;
    }

    .checkbox-button2 {
        display: inline-block;
        width: 20px;
        height: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 0;
        cursor: pointer;
    }


        .checkbox-button2.checked::after {
            content: '\2713';
            font-size: 16px;
            color: #333;
            display: block;
            text-align: center;
            line-height: 20px;
        }

</style>
<script>
    function showErrorVal(element, message) {

        const parentElement = element.closest('.col-md-3, .col-md-2');
        let errorMessage = parentElement.querySelector('.error-message-val');
        if (!errorMessage) {
            errorMessage = document.createElement('p');
            errorMessage.className = 'error-message-val';
            parentElement.appendChild(errorMessage);
        }
        const errorMessageReq = parentElement.querySelector(".error-message");
        if (errorMessageReq) {
            errorMessageReq.style.display = 'none';
        }
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        element.classList.add('error-input');
        if (element.offsetParent !== null) {
            element.focus();
            return false;
        }
    }
    function removeErrorVal(element) {

        const parentElement = element.closest('.col-md-3, .col-md-2');
        const errorMessage = parentElement.querySelector('.error-message-val');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
        const errorMessageReq = parentElement.querySelector(".error-message");
        if (errorMessageReq) {
            errorMessageReq.style.display = 'none';
        }
        element.classList.remove('error-input');
    }
    var buttonLead = document.getElementById('checkboxLead');
    buttonLead.addEventListener('click', function (e) {

        e.preventDefault();
        buttonLead.checked = !buttonLead.checked;
        if (buttonLead.checked) {

            buttonLead.classList.add('checked');
        } else {

            buttonLead.classList.remove('checked');
        }
        if (buttonLead.checked) {

            alert("Checked!!")
            var emaiLeadPass = document.querySelector('.contactemail').value;
            var phoneLeadPass = document.querySelector('.contactphone').value;
            //Get all elements with class "contactemail" and set their value
            var emailInputsT = document.querySelectorAll(".contactemail");
            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
               // validateInputT({ target: input });
            });
            // Get all elements with class "contactphone" and set their value
            var phoneInputsT = document.querySelectorAll(".contactphone");
            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
               // validateInputT({ target: input });
            });
        } else {

            alert("Checkbox is unchecked");

            var emaiLeadPass = "";
            var phoneLeadPass = "";
            var emailInputsT = document.querySelectorAll(".contactemail");

            emailInputsT.forEach(function (input) {
                input.value = emaiLeadPass;
               // validateInputT({ target: input });
            });
            var phoneInputsT = document.querySelectorAll(".contactphone");

            phoneInputsT.forEach(function (input) {
                input.value = phoneLeadPass;
              //  validateInputT({ target: input });
            });

            var emaiLeadPassenger = localStorage.getItem('Leadpassenger3');
            var phoneLeadPassenger = localStorage.getItem('Leadpassenger4');
            document.querySelector("#contactemailID").value = emaiLeadPassenger;
            document.querySelector("#contactphoneID").value = phoneLeadPassenger;

        }
    });

    // function validateInputT(event) {

    //     const element = event.target;
    //     const value = element.value.trim();
    //     const validateType = element.getAttribute('data-validate');
    //     const validators = {
    //         name: /^[A-Za-z.]{0,32}$/,
    //         last: /^[A-Za-z.]{0,32}$/,
    //         email: /^(?!.*\.\.)[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/,
    //         phone: /^\d{10}$/
    //     };

    //     const messages = {
    //         name: 'Enter First Name.',
    //         last: 'Enter Last Name.',
    //         email: 'Enter valid email address.',
    //         phone: 'Enter valid phone number.',
    //         duplicate: 'Duplicate names are not allowed.'
    //     };
    //     if (value === "") {
    //         showErrorVal(element, messages[validateType]);
    //         return false;
    //     } else {
    //         removeErrorVal(element);
    //     }
    //     if (validateType === 'name' || validateType === 'last') {
    //         element.value = value.replace(/[^A-Za-z.]/g, '');
    //     }

    //     if (!validators[validateType].test(value)) {
    //         showErrorVal(element, messages[validateType]);
    //     } else {
    //         removeErrorVal(element);
    //     }
    //     if (validateType === 'name') {
    //         const allNames = document.querySelectorAll(`[data-validate="${validateType}"]`);
    //         const duplicate = Array.from(allNames).filter((el) => el.value.trim() === value && el !== element);
    //         if (duplicate.length > 0) {
    //             showErrorVal(element, messages['duplicate']);
    //             return false;
    //         } else {
    //             removeErrorVal(element);
    //         }
    //     }
    // }


   

</script>
<script type="text/javascript">
    $(document).ready(function () {
        function showForm() {
            $('#passengerForm').show();
        }
        $("#editData").click(function () {
            $("#dataPopup").hide();
        });

        $("#showReviewPopup").click(function (e) {
            e.preventDefault();

            /*******Validation Start*********/
            const fieldsToValidate = [
                { className: 'contactFname', errorMessage: 'First name is required', validationdata: /^[A-Za-z]{1,32}$/ },
                { className: 'contactLname', errorMessage: 'Last name is required', validationdata: /^[A-Za-z]{1,32}$/ },
                { className: 'contactemail', errorMessage: 'Email is invalid', validationdata: /^(?!.*\.\.)[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/ },
                { className: 'contactphone', errorMessage: 'Phone number at least 10 digits', validationdata: /^\d{10,}$/ }
            ];

            let firstInvalidElement = null;

            fieldsToValidate.forEach(field => {
                const elements = document.querySelectorAll(`.${field.className}`);
                elements.forEach(element => {
                    element.addEventListener("input", function () {
                        removeError(element);


                        // Restrict input to alphabetic characters for contactFname and contactLname
                        if (field.className === 'contactFname' || field.className === 'contactLname') {
                            element.value = element.value.replace(/[^A-Za-z]/g, ''); // Allow only alphabets
                        }
                        // Restrict input to integers only for contactphone
                        if (field.className === 'contactphone') {
                            element.value = element.value.replace(/[^0-9]/g, '');
                        }
                    });

                    if (element.value.trim() === "") {
                        if (field.className !== 'contactphone' && field.className !== 'contactemail') {
                            // If the field is blank and it's not the phone field, show the error message
                            showError(element, field.errorMessage);
                            if (!firstInvalidElement) {
                                firstInvalidElement = element;
                            }
                        }
                    } else if (field.className === 'contactphone' && element.value.trim().length < 10) {
                        // If the phone number has fewer than 10 digits, show an error message
                        showError(element, 'Phone number must be at least 10 digits');
                        if (!firstInvalidElement) {
                            firstInvalidElement = element;
                        }
                    } else if (field.className !== 'contactphone' && !field.validationdata.test(element.value.trim())) {
                        // For other fields, check their pattern validation
                        showError(element, field.errorMessage);
                        if (!firstInvalidElement) {
                            firstInvalidElement = element;
                        }
                    }
                });
            });

            // Check for duplicate first names
            const fnameElements = document.querySelectorAll('.contactFname');
            const fnameValues = Array.from(fnameElements).map(el => el.value.trim());
            const duplicates = fnameValues.filter((item, index) => fnameValues.indexOf(item) !== index && item !== "");

            if (duplicates.length > 0) {
                fnameElements.forEach(element => {
                    if (duplicates.includes(element.value.trim())) {
                        showError(element, 'Duplicate first names');
                        if (!firstInvalidElement) {
                            firstInvalidElement = element;
                        }
                    }
                    else {
                        // If no duplicates, remove the error
                        removeError(element);
                    }
                });
            }


            if (firstInvalidElement) {
                firstInvalidElement.focus();
                return false;
            } else {
                fieldsToValidate.forEach(field => {
                    const elements = document.querySelectorAll(`.${field.className}`);
                    elements.forEach(element => {
                        removeError(element);
                    });
                });

            }

            function removeError(element) {
                const parentElement = element.closest('.col-md-3,.col-md-2');
                const errorMessage = parentElement.querySelector(".error-message");
                if (errorMessage) {
                    errorMessage.style.display = 'none';
                }
                element.classList.remove("error-input");
            }

            function showError(element, message) {
                const parentElement = element.closest('.col-md-3, .col-md-2');
                let errorMessage = parentElement.querySelector(".error-message");
                if (!errorMessage) {
                    errorMessage = document.createElement("p");
                    errorMessage.className = "error-message";
                    parentElement.appendChild(errorMessage);
                }
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
                element.classList.add("error-input");
            }

            function validateInfantDOB(inafantIdx) {
                var year = document.getElementById("year_" + inafantIdx).value;
                //var month = document.getElementById("month_" + inafantIdx).value;
                var month = parseInt(document.getElementById("month_" + inafantIdx).value) + 1;
                var day = document.getElementById("day_" + inafantIdx).value;
                var dob = year + "-" + month + "-" + day;
                /****************************/
                if (month === 2) {
                    if (!isValidFebruaryDay(year, day)) {
                        alert("Invalid date! For February, the day must be 1-28 for a non-leap year or 1-29 for a leap year.");
                        return false;
                    }
                }
                /************************* */

                if (year == "") {
                    alert("Please select year for infant date-of-birth");
                    return false;
                }
                if (month == "") {
                    alert("Please select month for infant date-of-birth");
                    return false;
                }
                if (day == "") {
                    alert("Please select day for infant date-of-birth");
                    return false;
                }
                var dobDate = new Date(dob);
                var currentDate = new Date();
                var timeDiff = currentDate.getTime() - dobDate.getTime();
                var yearsDiff = timeDiff / (1000 * 3600 * 24 * 365.25);
                // Check if the age is less than 2 years (24 months)
                if (dobDate > currentDate) {
                    alert("Date of birth cannot be in the future. Please select a valid date.");
                    return false;
                }

                if (yearsDiff < 2) {
                    // if ($("#InfDOBCount_0").is(":visible")) {
                    //     alert("Infant 1  DOB : " + dob);
                    // }
                    // else if ($("#InfDOBCount_1").is(":visible")) {
                    //     alert("Infant 2  DOB : " + dob);
                    // }
                    // else if ($("#InfDOBCount_2").is(":visible")) {
                    //     alert("Infant 3  DOB : " + dob);
                    // }
                    // else if ($("#InfDOBCount_3").is(":visible")) {
                    //     alert("Infant 4  DOB : " + dob);
                    // }
                    // else if ($("#InfDOBCount_4").is(":visible")) {
                    //     alert("Infant 5  DOB : " + dob);
                    // }
                    // else if ($("#InfDOBCount_5").is(":visible")) {
                    //     alert("Infant 6  DOB : " + dob);
                    // }
                    return true; // Infant is valid
                } else {

                    return false; // Infant is too old
                }
            }

            // Example usage:
            if ($("#InfDOBCount_0").is(":visible")) {
                if (!validateInfantDOB(0)) {
                    alert("Infant 1 can't be greater than 2 years.");
                    return false;
                }
            }

            if ($("#InfDOBCount_1").is(":visible")) {
                if (!validateInfantDOB(1)) {
                    alert("Infant 2 can't be greater than 2 years.");
                    return false;
                }
            }

            if ($("#InfDOBCount_2").is(":visible")) {
                if (!validateInfantDOB(2)) {
                    alert("Infant 3 can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_3").is(":visible")) {
                if (!validateInfantDOB(3)) {
                    alert("Infant 4 can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_4").is(":visible")) {
                if (!validateInfantDOB(4)) {
                    alert("Infant 5 can't be greater than 2 years.");
                    return false;
                }
            }
            if ($("#InfDOBCount_5").is(":visible")) {
                if (!validateInfantDOB(5)) {
                    alert("Infant 6 can't be greater than 2 years.");
                    return false;
                }
            }

            // Infant validation (remains the same)

            /*******Validation End*********/

            var enteredData = "";
            for (var i = 0; i < @Model.passeengerlistRT[0].passengers.Count; i++) {
                var firstName = $("input[name='passengerdetails[" + i + "].First']").val();
                var lastName = $("input[name='passengerdetails[" + i + "].Last']").val();
                var title = $("select[name='passengerdetails[" + i + "].Title']").val();
                var Passengertypecode = $("input[name='passengerdetails[" + i + "].passengertypecode']").val();
                if (Passengertypecode == "ADT") { Passengertypecode = "Adult"; }
                if (Passengertypecode == "CHD") { Passengertypecode = "Child"; }
                enteredData += "<p><strong>Passenger " + (i + 1) + ": (" + Passengertypecode + ")</strong><br>";
                enteredData += "Title: " + title + "<br>";
                enteredData += "First Name: " + firstName + "<br>";
                enteredData += "Last Name: " + lastName + "</p>";
            }
            $("#enteredData").html(enteredData);
            $('#dataPopup').modal('show');

        });

        /************************************************************/
        function isValidFebruaryDay(year, day) {
            year = parseInt(year);
            day = parseInt(day);

            // Check for leap year
            var isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);

            // Valid days for February
            if (isLeapYear) {
                return day >= 1 && day <= 29;
            } else {
                return day >= 1 && day <= 28;
            }
        }
        //****************************************************** */



        $("#ContinueData").click(function () {

            $('#passengers_id').hide(); //Contact Details Div Hide
            //*************Validation effect Start**********
            var contentToDisplay = document.getElementById("content");
            contentToDisplay.style.display = "none";
            var content2To = document.getElementById("content2");
            content2To.style.display = "none";
            var toggleButton4To = document.getElementById("toggleButton4");
            toggleButton4To.style.opacity = "1.0";
            var GSTcontent5To = document.getElementById("content4");
            GSTcontent5To.style.display = "block";

            var GSTContinuebtn1 = document.querySelector("#Continuebtn");
            GSTContinuebtn1.disabled = false;
            GSTContinuebtn1.style.opacity = "1.0";

            var formData = new FormData($("#passengerFormRT")[0]);
            $.ajax({
                url: "/RoundAATripsellRT/PostReturnTravllerData",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {

                    $('#RTServiceRequestdata').html(result);

                },
                error: function (error) {

                }
            });
        });


    });

</script>



